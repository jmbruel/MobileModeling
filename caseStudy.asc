:societe: SLAT-Parapente
:soft: SLATShare
:slaturl: http://parapente.slat.asso.fr/
:experimental:
:imagesdir: images
[{topic}]
== Etude de cas : icon:paper-plane-o[] {soft} icon:car[]

ifndef::definitions[]
include::../definitions.txt[]
endif::definitions[]

ifdef::slides[:leveloffset: -1]

[{topic}]
=== Cahier des charges

image:logo-SLAT.jpg[SLAT, width=30%]

ifndef::slides[]
Le `{societe}` est la section `Parapente` du club `SLAT` qui est lui-même le club
montagne du CE d'Airbus.

Les membres de `{societe}` organisent régulièrement des sorties pour co-voiturer et voler ensembles.
Ils souhaitent que vous leur développiez une application pour gérer les frais liés à ces sorties.
En effet, pour l'instant, chaque chauffeur remplit un fichier excel pour déclarer ses
passagers, le kilométrage etc. Puis ensuite le trésorier de l'association fait des calculs
d'apothicaire pour déterminer qui doit payer combien et à qui, en intégrant éventuellement
la prise en charge du club sur les frais de déplacement.

.exemple de "Fiche Sortie" (un simple fichier excel)
image::ficheSortie.png[width=100%]

En termes de données, une sortie peut être de différents types (vol, réunion, séjour, ...)
et concerner un ou plusieurs chauffeurs.
Les frais engagés sont :

- les frais d'essence
- les péages
- éventuellement d'autres frais (nécessaire à la sortie)

Voici quelques caractéristiques et besoins clients (en vrac) :

- L’application à développer devra fonctionner sur des mobiles et tablettes {Android}.
- On pourra différencier les rôles des personnes utilisant l'application (passager, conducteur, trésorier).
- Même si un passager ne fait que l'aller, il participe aux frais A/R.
- On pourra avoir un accès Web aux informations concernant les membres.
- Concernant les frais, chacun aura sur sa "page personnelle" les informations
concernant le solde global en positif ou négatif et un récapitulatif de ses propres sorties.
- On pourra envisager toute option utiles pour le futur (comme le calcul du kilométrage à partir du GPS, l'ajout de passager
par leur QR-Code, etc.).
- On pourra envisager également de coupler l'application avec la planification des sorties.
Sur la base d'un calendrier, chacun peut se positionner présent un jour donné et tout
le monde peux donc voir qui est présent ou disponible ce jour là.
Peut-être même un système de vote associé à cette journée pour définir le lieux
(modifiable afin de tenir compte de la dernière météo).
- On pourra saisir les informations sur sa voiture (chevaux fiscaux, essence/diesel, consommatoin myenne, ...)
.
Quelques commentaires :

- Les passagers à l'aller ne sont pas nécessairement les mêmes qu'au retour.
- Les prises en charge sont différentes selon le type de sortie (vol, réunion, séjour, ...)
- "Chauffeur" veut dire "celui qui prend sa voiture" (ou plus précisément celui qui assume
les frais). Bien évidemment, un chauffeur peut faire conduire un de ses passagers sans
que cela change son statut pour l'application.
- Le {societe} possède également un mini-bus. Idéalement, l'application permettra de
saisir un déplacement avec ce minibus (prise en charge parcitulière).

.La "Fiche Sortie" quand le minibus est utilisé
image::ficheSortieMinibus.png[width=100%]

endif::slides[]

ifdef::slides[=== !]

[TIP]
=====
Vous pourrez vous inspirer d'applications comme :

- https://www.blablacar.fr/[Blablacar]
- http://www.ecf.asso.fr/Formation-permis/Application-mobile-conduite-accompagnee[ECF Conduite]

|===
| image:exemple2.png[width=100%] | image:exemple1.png[width=100%]  | image:exemple4.png[width=100%] | image:exemple5.png[width=100%]
|===
=====

[{topic}]
=== Questions

. Réalisez un diagramme des cas d’utilisation de cette application.
+
ifdef::correction[]
.Une correction possible
plantuml::images/SLAT-parapente/uc.plantuml[uc]
endif::correction[]
+
. Réalisez un diagramme de domaine (diagramme des classes métiers) de cette application.
+
.Exemple 2015/2016 (Ballades VTT)
image::voisMaBalade/dc2.png[width=100%]
+
ifdef::correction[]
.Une correction possible
plantuml::images/SLAT-parapente/dc.plantuml[dc]
endif::correction[]
+
. Quel type de diagramme utiliser pour représenter les écrans de votre application?
+
ifdef::correction[]
Un écran est composé d’éléments structurels. Il convient donc de le représenter
avec un diagramme de classe.

.Maquettes en Balsamiq
image::balsamiq.png[]

Les enchainements d’écrans peuvent être décrits comme des comportements.
On pourra utiliser un d’état-transition.
endif::correction[]
+
. Quel type de diagramme utiliser pour représenter des enchainements d’écrans ?
Réalisez un diagramme de votre choix pour représenter les écrans principaux de
votre application et leur enchaînement.
+
.Exemple 2015/2016 (Ballades VTT)
image::voisMaBalade/enchainement.png[width=100%]
ifdef::correction[]
Les enchainements d’écrans peuvent être décrits comme des comportements.
On peut utiliser :

- un d’état-transition (cf. <<enchainementEtat,Figure ci-dessous>>),
- un outil de sketchs, genre {balsamiq}
- un outil qui génère du code, genre {androidstudio}

[[enchainementEtat]]
.Une correction possible
plantuml::images/SLAT-parapente/enchainement.plantuml[enchainement]

endif::correction[]


[{topic}]
=== Outils

- Pour les mockups/sketchs : https://iutblagnac.mybalsamiq.com/projects/slat-parapente
+
[TIP]
=====
Vous pouvez accéder aux dessins de l'an dernier (https://iutblagnac.mybalsamiq.com/projects/voismabalade).
=====
+
- Pour {uml} : {p4e}, {plantuml}


[{topic}]
=== Résultats attendus

[{incremental}]
- Rapport au format `.pdf`
- Démo au format de votre choix (PPT/PDF, Vidéo)
+
.Exemple de vidéo réalisée l'an dernier
[TIP]
=====
//video::Lahitette_Lassus-Pomes_PresentationApp.wmv[width=640, start=60, end=140, options=autoplay]
https://www.dropbox.com/s/8yxu6s9q8ekf4e1/Lahitette_Lassus-Pomes_PresentationApp.wmv?dl=0
=====
+
- `.zip` avec figures, modèles `.uml`, code, etc.

// ------------------------------------------ Evaluation
[{topic}]
=== Evaluation

Rappelons les conseils habituels :

- clarté des diagrammes et des choix (explicites) de conception ou d'interprétation réalisés
- *cohérence* entre les diagrammes

ifdef::slides[=== Evaluation (suite)]

L'évaluation portera principalement sur les critères suivants :

[[Criteres]]
.Critères
[align="center",width="90%",cols="6,^4,^2",options="header"]
|=========================================================
| Critère											| Type de critère 			| Poids approximatif
| Diagramme des UC									| Correction, pertinence	| 15%
| Diagramme des Classes Domaine		| Correction, pertinence	| 15%
| Maquettes utilisateur	| Correction, pertinence	| 15%
| Diagramme d'un écran		| Correction, pertinence	| 15%
| Cohérence inter-modèles (SNI/DSS, UC/DSS/DS/DCP)	|  Correction, pertinence	| 15%
| Communication/Présentations/Ignite					         | subjectif :-)				| 15%
| Clarté – Présentation du Dossier					         | subjectif :-)				| 10%
|=========================================================

ifdef::slides[=== Evaluation (suite)]

[TIP]
====
Vous pouvez insérer une section "auto-évaluation" dans votre rapport, qui reprend cette grille et
vous permet de vous auto-évaluer.
====


ifdef::slides[:leveloffset: 0]
